#!/bin/bash
# War/ webApp deploying script
# For home-base-seperated tomcat deployment, or tomcats in $_BASES_DIR/someWebName/<tomcat files & dirs>
# webs, servers, wars info stored in /opt/wars/wars.lst, no mysql db required(compare script `deployWeb` ). 
# requires script `tmc` on the remote servers.
# Working dirs:
# /opt
# ├── app
# │   ├── apache-tomcat-8.0.43
# │   └── tomcat -> ./apache-tomcat-8.0.43	CATALINA_HOME
# ├── resources					Static files for your webapps
# ├── wars					For deployment 
# │   ├── archive				war files archive
# │   ├── _config				Config files for production environment
# │   │     └── yourweb1 
# │   │         └── WEB-INF
# │   │             └── classes
# │   │                 ├── application.properties
# │   │                 └── jdbc.properties
# │   ├── cook					place for repacking war files
# │   ├── todeploy				war files to be deployed
# │   └── wars.lst				webs servers wars info
# └── webs
#     ├── yourweb1				CATALINA_BASE
#     └── yourweb2				CATALINA_BASE

# sample files in _config
# Usage:
#1. Upload war files to /opt/wars/todeploy
#2. Run: deployweb 'webapp1 webapp2 webapp3'  ( Note: .war is not needed )
#3. Repacked war files will be copied to /opt/wars/archive for later rollback.

source /usr/local/bin/japp.include
_cook_path="$_OPER_PATH/cook"
_backup_path="$_OPER_PATH/archive/`date +%F_%H%M`"

if [[ -z $1 ]] ; then
   echo -e "Usage: deployWeb <'war1 war2 ...'> <RemoteServer>"
   echo -e "RemoteServer=L 		  deploy wars in local dir $_OPER_PATH/todepoly"
   echo -e "RemoteServer=hostName:sshPort deploy wars downloaded from Hostname:$_OPER_PATH/todeploy"
   echo -e "Example:  deployWeb 'webapp1 webapp2 webapp3' app-server-hostname"
   exit 0
fi
if [[ -z $2 ]]; then
    _src="L"
else
    _src=$2
fi
array_wars=($1)

_wars.lst=`grep -v ^# $_OPER_PATH/wars.lst 2>/dev/null`
if [[ -z $_wars.lst ]]; then
    echo "$_OPER_PATH/wars.lst is not properly configured or does not exist." 
    echo "This file should be like:"
    echo:"#warName:newName:needRestart:serverName:serverUser:webName:serverPort:webPort"
    echo:"warname:newname:N:localhost:user:webname:22:8080"
    exit 1
fi
echo "wars.lst:"
echo "#warName:newName:needRestart:serverName:serverUser:webName:serverPort:webPort"
echo "$_wars.lst"
echo
set -u 
# Base variables
if [[ $_src = L ]] ;then
    _remote_server="localhost"
    _remote_port=$_SSH_PORT
else
    _remote_server=`echo $_src|awk -F: '{print $1}'`
    _remote_port=`  echo $_src|awk -F: '{print $2}'`
    if ! ssh -p ${_remote_port} ${_remote_user}@${_remote_server} "ls ${_remote_path}/*.war" ; then
	echo "There are no war files on $_remote_server:$_remote_path."
	exit 1
    fi
fi
_remote_user="$_WORK_USER"
_remote_path="$_OPER_PATH/todeploy"

# Let's roll ! 
mkdir -p $_backup_path
cd $_cook_path
echo "Cook dir:"
pwd 
rm ./* -rf 2>/dev/null

IFS="
"

for x in ${array_wars[@]} ; do
    echo "`date +%F_%T`------------ START ------------- $x"

    echo "Download , repack ${x} ..."
    if scp -P ${_remote_port} -p ${_remote_user}@${_remote_server}:${_remote_path}/${x}.war . ; then
	_upload=${x}.war
        $JAVA_HOME/bin/jar -uf ${x}.war -C ${_OPER_PATH}/_config/${x}/ . 
    else
	echo "There is no ${_remote_user}@${_remote_server}:${_remote_path}/${x}.war (ssh port ${_remote_port})"
	continue
    fi

    echo "backup $_upload to $_backup_path ..."
    /bin/cp -rp $_upload $_backup_path/

    echo "-------------------------- "
    _war_info=`echo "$_wars.lst"|egrep ^${x}` 
    for s in "$_war_info"; do
        _warname=`   echo $_war_info | awk -F: '{print $1}'`
        _warnewname=`echo $_war_info | awk -F: '{print $2}'`
        _restart=`   echo $_war_info | awk -F: '{print $3}'`
        _srvname=`   echo $_war_info | awk -F: '{print $4}'`
        _srvuser=`   echo $_war_info | awk -F: '{print $5}'`
        _webname=`   echo $_war_info | awk -F: '{print $6}'`
        _port=`      echo $_war_info | awk -F: '{print $7}'`
        _webport=`   echo $_war_info | awk -F: '{print $8}'`
        echo "warname: $_warname"
        echo "newname: $_warnewname"
        echo "restart: $_restart"
        echo "srvname: $_srvname"
	echo "srvuser: $_srvuser"
        echo "port:    $_port"
        echo "webname: $_webname"
        echo "webport: $_webport"
        echo
	_wardirname=${_warnewname}
	_warnewname=${_warnewname}.war


	# Deploy
	_dest_webapps_dir="$_BASES_DIR/$_webname/webapps"
	echo "$_dest_webapps_dir"
	ssh -p ${_port} ${_srvuser}@${_srvname} "ls -ltr $_dest_webapps_dir" 

	if [[ $_restart = Y ]]; then
	    echo "Stop tomcat $_webname on $_srvname & clear $_wardirname/$_warnewname ..."
	    ssh -p ${_port} ${_srvuser}@${_srvname} "tmc ${_webname} down ; for ((i=1;i<=10;i++)); do sleep 1 ; echo -n . ; done ; echo; rm ${_dest_webapps_dir}/${_warnewname}/ -rf 2>/dev/null; rm ${_dest_webapps_dir}/${_wardirname} -rf 2>/dev/null "

	    echo "Upload $_upload to $_dest_webapps_dir/$_warnewname ..."
	    scp -P ${_port} -p ${_upload} ${_srvuser}@${_srvname}:${_dest_webapps_dir}/${_warnewname} > /dev/null

	    echo "Start tomcat $_webname on $_srvname ..."
	    ssh -p ${_port} ${_srvuser}@${_srvname} "tmc ${_webname} up" 

	else
	    echo "Upload $_upload to $_dest_webapps_dir/$_warnewname ..."
	    scp -P ${_port} -p ${_upload} ${_srvuser}@${_srvname}:${_dest_webapps_dir}/${_warnewname} > /dev/null
	fi
	for ((i=1;i<=10;i++)); do sleep 1 ; echo -n . ; done ; echo
	echo "Updated:"
        ssh -p ${_port} ${_srvuser}@${_srvname}  "ls -ltr $_dest_webapps_dir"
	echo 
    done # servers
    echo "`date +%F_%T` ========== END =========== $x"
    echo 
done  # array_wars

